// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: sf/graphql/v1/graphql.proto

package pbgraphql

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphQLClient is the client API for GraphQL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphQLClient interface {
	Execute(ctx context.Context, in *Request, opts ...grpc.CallOption) (GraphQL_ExecuteClient, error)
}

type graphQLClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphQLClient(cc grpc.ClientConnInterface) GraphQLClient {
	return &graphQLClient{cc}
}

func (c *graphQLClient) Execute(ctx context.Context, in *Request, opts ...grpc.CallOption) (GraphQL_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &GraphQL_ServiceDesc.Streams[0], "/sf.graphql.v1.GraphQL/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphQLExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GraphQL_ExecuteClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type graphQLExecuteClient struct {
	grpc.ClientStream
}

func (x *graphQLExecuteClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GraphQLServer is the server API for GraphQL service.
// All implementations should embed UnimplementedGraphQLServer
// for forward compatibility
type GraphQLServer interface {
	Execute(*Request, GraphQL_ExecuteServer) error
}

// UnimplementedGraphQLServer should be embedded to have forward compatible implementations.
type UnimplementedGraphQLServer struct {
}

func (UnimplementedGraphQLServer) Execute(*Request, GraphQL_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

// UnsafeGraphQLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphQLServer will
// result in compilation errors.
type UnsafeGraphQLServer interface {
	mustEmbedUnimplementedGraphQLServer()
}

func RegisterGraphQLServer(s grpc.ServiceRegistrar, srv GraphQLServer) {
	s.RegisterService(&GraphQL_ServiceDesc, srv)
}

func _GraphQL_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphQLServer).Execute(m, &graphQLExecuteServer{stream})
}

type GraphQL_ExecuteServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type graphQLExecuteServer struct {
	grpc.ServerStream
}

func (x *graphQLExecuteServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// GraphQL_ServiceDesc is the grpc.ServiceDesc for GraphQL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphQL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.graphql.v1.GraphQL",
	HandlerType: (*GraphQLServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _GraphQL_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sf/graphql/v1/graphql.proto",
}
