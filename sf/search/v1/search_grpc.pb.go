// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: sf/search/v1/search.proto

package pbsearch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendClient interface {
	StreamMatches(ctx context.Context, in *BackendRequest, opts ...grpc.CallOption) (Backend_StreamMatchesClient, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) StreamMatches(ctx context.Context, in *BackendRequest, opts ...grpc.CallOption) (Backend_StreamMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Backend_ServiceDesc.Streams[0], "/sf.search.v1.Backend/StreamMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendStreamMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Backend_StreamMatchesClient interface {
	Recv() (*SearchMatch, error)
	grpc.ClientStream
}

type backendStreamMatchesClient struct {
	grpc.ClientStream
}

func (x *backendStreamMatchesClient) Recv() (*SearchMatch, error) {
	m := new(SearchMatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackendServer is the server API for Backend service.
// All implementations should embed UnimplementedBackendServer
// for forward compatibility
type BackendServer interface {
	StreamMatches(*BackendRequest, Backend_StreamMatchesServer) error
}

// UnimplementedBackendServer should be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (UnimplementedBackendServer) StreamMatches(*BackendRequest, Backend_StreamMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMatches not implemented")
}

// UnsafeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServer will
// result in compilation errors.
type UnsafeBackendServer interface {
	mustEmbedUnimplementedBackendServer()
}

func RegisterBackendServer(s grpc.ServiceRegistrar, srv BackendServer) {
	s.RegisterService(&Backend_ServiceDesc, srv)
}

func _Backend_StreamMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BackendRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServer).StreamMatches(m, &backendStreamMatchesServer{stream})
}

type Backend_StreamMatchesServer interface {
	Send(*SearchMatch) error
	grpc.ServerStream
}

type backendStreamMatchesServer struct {
	grpc.ServerStream
}

func (x *backendStreamMatchesServer) Send(m *SearchMatch) error {
	return x.ServerStream.SendMsg(m)
}

// Backend_ServiceDesc is the grpc.ServiceDesc for Backend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.search.v1.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMatches",
			Handler:       _Backend_StreamMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sf/search/v1/search.proto",
}

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterClient interface {
	StreamMatches(ctx context.Context, in *RouterRequest, opts ...grpc.CallOption) (Router_StreamMatchesClient, error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) StreamMatches(ctx context.Context, in *RouterRequest, opts ...grpc.CallOption) (Router_StreamMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Router_ServiceDesc.Streams[0], "/sf.search.v1.Router/StreamMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerStreamMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_StreamMatchesClient interface {
	Recv() (*SearchMatch, error)
	grpc.ClientStream
}

type routerStreamMatchesClient struct {
	grpc.ClientStream
}

func (x *routerStreamMatchesClient) Recv() (*SearchMatch, error) {
	m := new(SearchMatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouterServer is the server API for Router service.
// All implementations should embed UnimplementedRouterServer
// for forward compatibility
type RouterServer interface {
	StreamMatches(*RouterRequest, Router_StreamMatchesServer) error
}

// UnimplementedRouterServer should be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (UnimplementedRouterServer) StreamMatches(*RouterRequest, Router_StreamMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMatches not implemented")
}

// UnsafeRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterServer will
// result in compilation errors.
type UnsafeRouterServer interface {
	mustEmbedUnimplementedRouterServer()
}

func RegisterRouterServer(s grpc.ServiceRegistrar, srv RouterServer) {
	s.RegisterService(&Router_ServiceDesc, srv)
}

func _Router_StreamMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RouterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).StreamMatches(m, &routerStreamMatchesServer{stream})
}

type Router_StreamMatchesServer interface {
	Send(*SearchMatch) error
	grpc.ServerStream
}

type routerStreamMatchesServer struct {
	grpc.ServerStream
}

func (x *routerStreamMatchesServer) Send(m *SearchMatch) error {
	return x.ServerStream.SendMsg(m)
}

// Router_ServiceDesc is the grpc.ServiceDesc for Router service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Router_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.search.v1.Router",
	HandlerType: (*RouterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMatches",
			Handler:       _Router_StreamMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sf/search/v1/search.proto",
}

// ForkResolverClient is the client API for ForkResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForkResolverClient interface {
	StreamUndoMatches(ctx context.Context, in *ForkResolveRequest, opts ...grpc.CallOption) (ForkResolver_StreamUndoMatchesClient, error)
}

type forkResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewForkResolverClient(cc grpc.ClientConnInterface) ForkResolverClient {
	return &forkResolverClient{cc}
}

func (c *forkResolverClient) StreamUndoMatches(ctx context.Context, in *ForkResolveRequest, opts ...grpc.CallOption) (ForkResolver_StreamUndoMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ForkResolver_ServiceDesc.Streams[0], "/sf.search.v1.ForkResolver/StreamUndoMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &forkResolverStreamUndoMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ForkResolver_StreamUndoMatchesClient interface {
	Recv() (*SearchMatch, error)
	grpc.ClientStream
}

type forkResolverStreamUndoMatchesClient struct {
	grpc.ClientStream
}

func (x *forkResolverStreamUndoMatchesClient) Recv() (*SearchMatch, error) {
	m := new(SearchMatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ForkResolverServer is the server API for ForkResolver service.
// All implementations should embed UnimplementedForkResolverServer
// for forward compatibility
type ForkResolverServer interface {
	StreamUndoMatches(*ForkResolveRequest, ForkResolver_StreamUndoMatchesServer) error
}

// UnimplementedForkResolverServer should be embedded to have forward compatible implementations.
type UnimplementedForkResolverServer struct {
}

func (UnimplementedForkResolverServer) StreamUndoMatches(*ForkResolveRequest, ForkResolver_StreamUndoMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUndoMatches not implemented")
}

// UnsafeForkResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForkResolverServer will
// result in compilation errors.
type UnsafeForkResolverServer interface {
	mustEmbedUnimplementedForkResolverServer()
}

func RegisterForkResolverServer(s grpc.ServiceRegistrar, srv ForkResolverServer) {
	s.RegisterService(&ForkResolver_ServiceDesc, srv)
}

func _ForkResolver_StreamUndoMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ForkResolveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForkResolverServer).StreamUndoMatches(m, &forkResolverStreamUndoMatchesServer{stream})
}

type ForkResolver_StreamUndoMatchesServer interface {
	Send(*SearchMatch) error
	grpc.ServerStream
}

type forkResolverStreamUndoMatchesServer struct {
	grpc.ServerStream
}

func (x *forkResolverStreamUndoMatchesServer) Send(m *SearchMatch) error {
	return x.ServerStream.SendMsg(m)
}

// ForkResolver_ServiceDesc is the grpc.ServiceDesc for ForkResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForkResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.search.v1.ForkResolver",
	HandlerType: (*ForkResolverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUndoMatches",
			Handler:       _ForkResolver_StreamUndoMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sf/search/v1/search.proto",
}
